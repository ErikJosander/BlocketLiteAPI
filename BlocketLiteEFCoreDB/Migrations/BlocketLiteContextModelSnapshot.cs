// <auto-generated />
using System;
using BlocketLiteEFCoreDB.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlocketLiteEFCoreDB.Migrations
{
    [DbContext(typeof(BlocketLiteContext))]
    partial class BlocketLiteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlocketLiteEFCoreDB.Entities.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanBeRented")
                        .HasColumnType("bit");

                    b.Property<bool>("CanBeSold")
                        .HasColumnType("bit");

                    b.Property<int>("ConstructionYear")
                        .HasColumnType("int")
                        .HasMaxLength(4);

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RentingPrice")
                        .HasColumnType("int")
                        .HasMaxLength(50);

                    b.Property<int?>("SellingPrice")
                        .HasColumnType("int")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Advertisements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Varberg Adress",
                            CanBeRented = true,
                            CanBeSold = false,
                            ConstructionYear = 1978,
                            Contact = "10708 001122",
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 9, 22, 8, 1, 41, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Big apartment with 5 rooms for rent",
                            PropertyTypeId = 1,
                            RentingPrice = 350,
                            Title = "Very very cool apartment for rent",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "Håstensgatan 4",
                            CanBeRented = false,
                            CanBeSold = true,
                            ConstructionYear = 1921,
                            Contact = "1111-33334",
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 9, 22, 8, 1, 41, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Cozy house, close to the sea, 2 bedrooms and a big garden",
                            PropertyTypeId = 2,
                            SellingPrice = 1200000,
                            Title = "Small house in fishing village",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Address = "Hello Adress",
                            CanBeRented = true,
                            CanBeSold = false,
                            ConstructionYear = 2012,
                            Contact = "000-33334",
                            CreatedOn = new DateTimeOffset(new DateTime(2020, 9, 22, 8, 1, 41, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Small office space 10sq in the heart of London",
                            PropertyTypeId = 3,
                            RentingPrice = 500,
                            Title = "Office Space in London",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("BlocketLiteEFCoreDB.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdvertisementId = 1,
                            Content = "First comment by Calle",
                            CreatedOn = new DateTime(2020, 9, 22, 10, 1, 41, 893, DateTimeKind.Local).AddTicks(9121),
                            UserId = 1,
                            UserName = "Calle"
                        },
                        new
                        {
                            Id = 2,
                            AdvertisementId = 2,
                            Content = "huml, humla humla. Comment 2",
                            CreatedOn = new DateTime(2020, 9, 22, 10, 1, 41, 897, DateTimeKind.Local).AddTicks(8917),
                            UserId = 2,
                            UserName = "Johan"
                        },
                        new
                        {
                            Id = 3,
                            AdvertisementId = 1,
                            Content = "Cool, what is this",
                            CreatedOn = new DateTime(2020, 9, 22, 10, 1, 41, 897, DateTimeKind.Local).AddTicks(9000),
                            UserId = 3,
                            UserName = "Alex"
                        },
                        new
                        {
                            Id = 4,
                            AdvertisementId = 1,
                            Content = "What is wrong with this comment",
                            CreatedOn = new DateTime(2020, 9, 21, 10, 1, 41, 897, DateTimeKind.Local).AddTicks(9008),
                            UserId = 1,
                            UserName = "Calle"
                        });
                });

            modelBuilder.Entity("BlocketLiteEFCoreDB.Entities.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "apartment"
                        },
                        new
                        {
                            Id = 2,
                            Type = "house"
                        },
                        new
                        {
                            Id = 3,
                            Type = "office"
                        },
                        new
                        {
                            Id = 4,
                            Type = "warehouse"
                        });
                });

            modelBuilder.Entity("BlocketLiteEFCoreDB.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RatedUserId")
                        .HasColumnType("int");

                    b.Property<int?>("RatingUserId")
                        .HasColumnType("int");

                    b.Property<int?>("RatingUserId1")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RatingUserId");

                    b.HasIndex("RatingUserId1");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RatedUserId = 1,
                            RatingUserId = 2,
                            Value = 3
                        },
                        new
                        {
                            Id = 2,
                            RatedUserId = 1,
                            RatingUserId = 3,
                            Value = 2
                        });
                });

            modelBuilder.Entity("BlocketLiteEFCoreDB.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Erik@gmail.com",
                            Password = "123",
                            UserName = "Calle"
                        },
                        new
                        {
                            Id = 2,
                            Email = "Johan@gmail.com",
                            Password = "123",
                            UserName = "Johan"
                        },
                        new
                        {
                            Id = 3,
                            Email = "Alex@gmail.com",
                            Password = "123",
                            UserName = "Alex"
                        });
                });

            modelBuilder.Entity("BlocketLiteEFCoreDB.Entities.Advertisement", b =>
                {
                    b.HasOne("BlocketLiteEFCoreDB.Entities.PropertyType", "PropertyType")
                        .WithMany("Advertisments")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlocketLiteEFCoreDB.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BlocketLiteEFCoreDB.Entities.Comment", b =>
                {
                    b.HasOne("BlocketLiteEFCoreDB.Entities.Advertisement", "Advertisement")
                        .WithMany("Comments")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlocketLiteEFCoreDB.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BlocketLiteEFCoreDB.Entities.Rating", b =>
                {
                    b.HasOne("BlocketLiteEFCoreDB.Entities.User", "RatedUser")
                        .WithMany("Ratings")
                        .HasForeignKey("RatingUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BlocketLiteEFCoreDB.Entities.User", "RatingUser")
                        .WithMany()
                        .HasForeignKey("RatingUserId1");
                });
#pragma warning restore 612, 618
        }
    }
}
